C51 COMPILER V9.01   MAIN                                                                  02/09/2022 10:51:33 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REGX52.H>
   2          #include "UART.H"
   3          #include "TIMER0.H"
   4          #include "NIXIE_TIMER.H"
   5          #include "MATRIX_TIMER.H"
   6          //#include "KEY_TIMER.H"
   7          
   8          unsigned char Con_Clock;        //时钟自走标志位
   9          unsigned char ReceiveData;      //串口接收数据变量
  10          unsigned char Hour=12,Min=35,Sec=10,Tim;         //时间参数
  11          unsigned char KeyNum,Flag;               //接收键码
  12          
  13          void Clock_Show();               //时钟数码管显示函数
  14          void Clock_Loop();               //定时器调用时钟自走函数
  15          void Clock_SetTime();    //时钟设置函数
  16          
  17          
  18          void main()
  19          {
  20   1              UART_Init();
  21   1              Timer0_Init();
  22   1      
  23   1              UART_SendByte(0x35);
  24   1      
  25   1              while(1)
  26   1              {
  27   2                      Clock_Show();            //数码管显示时间
  28   2      
  29   2                      if(ReceiveData == 'R')     //判断串口接收数据是否为“R”  启动
  30   2                      {
  31   3                              Con_Clock = 1;            //时间自走标志位置1，开启时钟
  32   3                              Flag = 0;
  33   3                      }
  34   2                      else if(ReceiveData == 'P')      //判断串口接收数据是否为“P”    暂停
  35   2                      {
  36   3                              Con_Clock = 0;                    //时间自走标志位置0，暂停时钟
  37   3      
  38   3                      }
  39   2                      else if(ReceiveData == 'C')       //判断串口接收数据是否为“C”    更改
  40   2                      {
  41   3                              Con_Clock = 0;                   //时间自走标志位置0，暂停时钟
  42   3                              Clock_SetTime();                 //调用时间设置函数
  43   3                      }
  44   2                      
  45   2              }
  46   1      }
  47          void UART_Routine() interrupt 4          //串口中断
  48          {
  49   1              if(RI)           //若有数据 则进入
  50   1              {
  51   2                      if((SBUF == 'R') || (SBUF == 'P') || (SBUF == 'C'))        //过滤其他数据
  52   2                      {
  53   3                              ReceiveData = SBUF;
  54   3                              RI = 0;
  55   3                      }
C51 COMPILER V9.01   MAIN                                                                  02/09/2022 10:51:33 PAGE 2   

  56   2                      RI = 0;
  57   2              }
  58   1      }
  59          
  60          void Timer0_Routine() interrupt 1         //定时器中断
  61          {
  62   1              static unsigned int T0count1,T0count2,T0count3;//
  63   1              TL0 = 0x18;             //设置定时初始值
  64   1              TH0 = 0xFC;             //设置定时初始值
  65   1              if(T0count1>=1000)         //每1s调用一次Clock_Loop
  66   1              {
  67   2                      T0count1 = 0;
  68   2                      Clock_Loop();
  69   2                      Tim++;
  70   2              }
  71   1              T0count1++;
  72   1              if(T0count2 >= 10)        //每20ms调用一次Matrix_Loop
  73   1              {
  74   2                      T0count2 = 0;
  75   2                      Matrix_Loop();
  76   2              }
  77   1              T0count2++;
  78   1              if(T0count3 >= 2)                //每2ms调用一次Nixie_Loop
  79   1              {
  80   2                      T0count3 = 0;
  81   2                      Nixie_Loop();
  82   2              }
  83   1              T0count3++;
  84   1      }
  85          void Clock_Loop()          //时钟更新函数
  86          {
  87   1              if(Con_Clock)
  88   1              {
  89   2                      Sec++;
  90   2                      if(Sec>=60)
  91   2                      {
  92   3                              Sec = 0;
  93   3                              Min++;
  94   3                              if(Min>=60)
  95   3                              {
  96   4                                      Min = 0;
  97   4                                      Hour++;
  98   4                                      if(Hour>=24)
  99   4                                      {
 100   5                                              Hour = 0;
 101   5                                      }
 102   4                              }
 103   3                      }
 104   2              }       
 105   1      }
 106          void Clock_Show()                 //时间显示函数
 107          {
 108   1              Nixie_Scan(3,17);
 109   1              Nixie_Scan(6,17);       
 110   1              if((Flag == 0) && (ReceiveData == 'C'))
 111   1              {
 112   2                      if(Tim%2 == 0)
 113   2                      {
 114   3                              Nixie_Scan(7,Sec/10);
 115   3                              Nixie_Scan(8,Sec%10);
 116   3                      }
 117   2                      else
C51 COMPILER V9.01   MAIN                                                                  02/09/2022 10:51:33 PAGE 3   

 118   2                      {
 119   3                              Nixie_Scan(7,16);
 120   3                              Nixie_Scan(7,16);
 121   3                              Nixie_Scan(8,16);
 122   3                      }
 123   2                      Nixie_Scan(1,Hour/10);
 124   2                      Nixie_Scan(2,Hour%10);
 125   2                      Nixie_Scan(4,Min/10);
 126   2                      Nixie_Scan(5,Min%10);
 127   2                      
 128   2              }
 129   1              else if((Flag == 1) && (ReceiveData == 'C'))
 130   1              {
 131   2                      if(Tim%2 == 0)
 132   2                      {
 133   3                              Nixie_Scan(4,Min/10);
 134   3                              Nixie_Scan(5,Min%10);
 135   3                      }
 136   2                      else
 137   2                      {
 138   3                              Nixie_Scan(4,16);
 139   3                              Nixie_Scan(5,16);
 140   3                      }
 141   2                      Nixie_Scan(1,Hour/10);
 142   2                      Nixie_Scan(2,Hour%10);
 143   2                      Nixie_Scan(7,Sec/10);
 144   2                      Nixie_Scan(8,Sec%10);
 145   2              }
 146   1              else if((Flag == 2) && (ReceiveData == 'C'))
 147   1              {
 148   2                      if(Tim%2 == 0)
 149   2                      {
 150   3                              Nixie_Scan(1,Hour/10);
 151   3                              Nixie_Scan(2,Hour%10);
 152   3                      }
 153   2                      else
 154   2                      {
 155   3                              Nixie_Scan(1,16);
 156   3                              Nixie_Scan(2,16);
 157   3                      }
 158   2                      Nixie_Scan(4,Min/10);
 159   2                      Nixie_Scan(5,Min%10);
 160   2                      Nixie_Scan(7,Sec/10);
 161   2                      Nixie_Scan(8,Sec%10);
 162   2              }
 163   1              else
 164   1              {
 165   2                      Nixie_Scan(1,Hour/10);
 166   2                      Nixie_Scan(2,Hour%10);
 167   2                      Nixie_Scan(4,Min/10);
 168   2                      Nixie_Scan(5,Min%10);
 169   2                      Nixie_Scan(7,Sec/10);
 170   2                      Nixie_Scan(8,Sec%10);   
 171   2              }
 172   1      
 173   1              Tim %=10 ;
 174   1              
 175   1              
 176   1      }
 177          void Clock_SetTime()              //时钟设置函数
 178          {
 179   1              KeyNum = Matrix_Num();
C51 COMPILER V9.01   MAIN                                                                  02/09/2022 10:51:33 PAGE 4   

 180   1              if(KeyNum)
 181   1              {
 182   2      //              UART_SendByte(0x35);
 183   2                      if(KeyNum == 1)
 184   2                      {
 185   3                              Flag += 1;
 186   3                              Flag %= 3;//Flag越界判断，若大于等于3，则赋值0；
 187   3                      }
 188   2                      else if(KeyNum == 2)      //按下键2，则进行  +
 189   2                      {
 190   3                              if(Flag == 0)             //Flag值选择调节的位
 191   3                              {
 192   4                                      Sec++;
 193   4                                      Sec %= 60;
 194   4                              }
 195   3                              else if(Flag == 1)
 196   3                              {
 197   4                                      Min++;
 198   4                                      Min %= 60;
 199   4                              }
 200   3                              else if(Flag == 2)
 201   3                              {
 202   4                                      Hour++;
 203   4                                      Hour %= 24;
 204   4                              }
 205   3                      }
 206   2                      else if(KeyNum == 3)      //按下键3，则进行  -
 207   2                      {
 208   3                              if(Flag == 0)
 209   3                              {
 210   4                                      if(Sec == 0){Sec = 60;}
 211   4                                      Sec--;  
 212   4                              }
 213   3                              else if(Flag == 1)
 214   3                              {
 215   4                                      if(Min == 0){Min = 60;}
 216   4                                      Min--;
 217   4                              }
 218   3                              else if(Flag == 2)
 219   3                              {
 220   4                                      if(Hour == 0){Hour = 24;}
 221   4                                      Hour--;
 222   4                              }
 223   3                      }
 224   2      
 225   2              }       
 226   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    888    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
